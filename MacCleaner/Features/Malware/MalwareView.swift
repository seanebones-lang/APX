//
//  MalwareView.swift
//  MacCleaner
//

import SwiftUI

struct MalwareView: View {
    @StateObject private var viewModel = MalwareViewModel()
    @EnvironmentObject var soundManager: SoundManager
    
    var body: some View {
        ModuleView(
            title: "Malware Removal",
            subtitle: "Scan for and remove adware and malicious software",
            icon: "shield.fill",
            iconGradient: [.red, .pink],
            isScanning: viewModel.isScanning,
            results: viewModel.threats.map { threat in
                ScanResult(path: threat.path, size: threat.size, type: .other, category: threat.type)
            },
            onScan: {
                soundManager.play(.buttonClick)
                Task {
                    await viewModel.scan()
                }
            },
            onClean: {
                soundManager.play(.buttonClick)
                Task {
                    await viewModel.removeThreats()
                }
            }
        )
        .onAppear {
            if viewModel.threats.isEmpty && !viewModel.isScanning {
                Task {
                    await viewModel.scan()
                }
            }
        }
    }
}

@MainActor
class MalwareViewModel: ObservableObject {
    @Published var threats: [MalwareThreat] = []
    @Published var isScanning = false
    
    func scan() async {
        isScanning = true
        
        let homeDir = FileManager.default.homeDirectoryForCurrentUser.path
        let suspiciousPaths = [
            "\(homeDir)/Library/LaunchAgents/com.adobe.ARM.UUID.plist",
            "\(homeDir)/Library/Application Support/MacKeeper",
            "/Library/Application Support/com.vsearch",
            "/Applications/MacKeeper.app",
            "\(homeDir)/Library/LaunchAgents/com.conduit.loader.agent.plist"
        ]
        
        var foundThreats: [MalwareThreat] = []
        for path in suspiciousPaths {
            if FileManager.default.fileExists(atPath: path) {
                let size = getFileSize(path)
                foundThreats.append(MalwareThreat(
                    path: path,
                    size: size,
                    type: "Adware"
                ))
            }
        }
        
        threats = foundThreats
        isScanning = false
    }
    
    func removeThreats() async {
        for threat in threats {
            try? FileManager.default.removeItem(atPath: threat.path)
        }
        threats.removeAll()
    }
    
    private func getFileSize(_ path: String) -> Int64 {
        var totalSize: Int64 = 0
        if let attributes = try? FileManager.default.attributesOfItem(atPath: path) {
            if let fileSize = attributes[.size] as? Int64 {
                totalSize = fileSize
            }
        }
        return totalSize
    }
}

struct MalwareThreat {
    let path: String
    let size: Int64
    let type: String
}

